# https://docs.gluonhq.com/#platforms_linux_github_actions
# https://developers.google.com/android/management/service-account
# https://developer.android.com/studio/publish/app-signing
# encode keystore file: openssl base64 -in <infile> -out <outfile>

# After a successful run, upload is visible on
# https://play.google.com/console/u/1/developers/6749154341000694829/app/4974329342368881247/bundle-explorer-selector

name: Linux Android

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Make sure the latest GraalVM is installed.
      # after this step env.JAVA_HOME and env.GRAALVM_HOME will point to the GraalVM location
      - name: Setup GraalVM built by Gluon
        uses: gluonhq/setup-graalvm@master
        # set GITHUB_TOKEN to avoid exceeding GitHub's API rate limit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Install extra required packaged on top of ubuntu-latest
      - name: Install libraries
        run: |
          sudo apt-get update
          sudo apt install libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev libgtk-3-dev libpango1.0-dev libxtst-dev

      # Setup the Android keystore, based on a repo secret. See the section 'Setup Android Keystore' below.
      - name: Setup Android Keystore
        id: android_keystore_file
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'my.keystore'
          encodedString: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      # Install the Gluon License (optional)
      # Using this step requires you to set a GLUON_LICENSE secret in the secret configuration of your repo. Have a look at https://gluonhq.com/products/mobile/buy for more information about obtaining a license.
      - name: Gluon License
        uses: gluonhq/gluon-build-license@v1
        with:
          gluon-license: ${{ secrets.GLUON_LICENSE }}

      # Build your project using Maven
      # The android profile is used, which means a native build will be created for the gluonfx target android.
      # This step also uses some env variables taken from the repo secrets. See the section 'Setup Android Keystore' below.
      - name: Gluon Build
        run: |
          export ANDROID_SDK=$ANDROID_HOME
          mvn -DconsoleProcessLog=true -Pandroid gluonfx:build gluonfx:package
        env:
          GRAALVM_HOME: ${{ env.JAVA_HOME }}
          ANDROID_KEYSTOREPATH: ${{ steps.android_keystore_file.outputs.filePath }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEYALIAS: ${{ secrets.ANDROID_KEYALIAS }}
          ANDROID_KEYALIAS_PASSWORD: ${{ secrets.ANDROID_KEYALIAS_PASSWORD }}

      # To be able to validate the build result, output the created files
      - name: Show created files
        run: ls -lR target/gluonfx/*

      # Create a staging directory where the binary will be copied into
      - name: Make staging directory
        run: mkdir staging

      # Copy the apk to the staging directory
      - name: Copy native app to staging
        run: cp -r target/gluonfx/aarch64-android/gvm/EmojiSnakeGameApp.* staging

      # Upload the target directory as a build artifact
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: Target
          path: target/gluonfx/

      # Upload the staging directory as a build artifact
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: Package
          path: staging

      # Upload the aab to the Google Play Store. See the section below.
      - name: Upoad to Google Play
        uses: r0adkll/upload-google-play@v1.0.15
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: be.webtechie.emojisnakegameapp
          releaseFiles: target/gluonfx/aarch64-android/gvm/EmojiSnakeGameApp.aab
          track: beta
